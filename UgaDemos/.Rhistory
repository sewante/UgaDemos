shiny::runApp()
runApp('D:/rProgramming/UNRA/RSDA')
runApp('D:/rProgramming/UNRA/RSDA')
runApp()
runApp('D:/rProgramming/UNRA/RSDA')
runApp('D:/rProgramming/UNRA/RSDA')
runApp()
runApp()
runApp('D:/rProgramming/UNRA/RSDA')
runApp('D:/rProgramming/UNRA/RSDA')
runApp()
runApp('D:/rProgramming/UNRA/RSDA')
runApp()
runApp()
runApp('D:/rProgramming/UNRA/RSDA')
runApp()
runApp('C:/Users/Administrator/Music/theApp')
runApp()
runApp('D:/rProgramming/UNRA/RSDA')
runApp()
runApp('D:/rProgramming/UNRA/RSDA')
runApp()
runApp()
runApp('D:/rProgramming/UNRA/RSDA')
rawPopulationData
rawPopulationData <- read.csv("C:/Users/Administrator/Documents/UgaDemos/population.csv", header = TRUE)
rawPopulationData
years                      <- rawPopulationData$Year
years
years[1:10]
runApp()
y<- generalPopn_Dynamics[2]
populationDyanamics_per_1000_popn <- data.frame(years,
Births_per_1000_popn,
Deaths_per_1000_popn,
Net_Migrants_per_1000_popn)# this is for population Dynamics per 1000 population
rawPopulationData <- read.csv("C:/Users/Administrator/Documents/UgaDemos/population.csv", header = TRUE)
rawPopulationData
# break the raw population data into short named columns
years                      <- rawPopulationData$Year
Births_per_1000_popn       <- rawPopulationData$Births.per.1.000.population
Deaths_per_1000_popn       <- rawPopulationData$Deaths.per.1.000.population
Net_Migrants_per_1000_popn <- rawPopulationData$Net.Number.of.Migrants.per.1.000.population
Rate_of_natural_increase   <- rawPopulationData$Rate.of.natural.increase..percent.
Growth_rate_percent        <- rawPopulationData$Growth.rate..percent.
Total_population           <- rawPopulationData$Population
Births                     <- rawPopulationData$Births
Deaths                     <- rawPopulationData$Deaths
Net_Migrants               <- rawPopulationData$Net.Number.of.Migrants
Natural_increase           <- rawPopulationData$Natural.Increase
Population_change          <- rawPopulationData$Population.Change
# store the columns in organised dataframes
generalPopn_Dynamics              <- data.frame(years,
Births,
Deaths,
Total_population,
Natural_increase) # this is for general population Dyanamics
populationDyanamics_per_1000_popn <- data.frame(years,
Births_per_1000_popn,
Deaths_per_1000_popn,
Net_Migrants_per_1000_popn)# this is for population Dynamics per 1000 population
otherPopulationDynamics           <- data.frame(years,
Net_Migrants,
Population_change,
Growth_rate_percent,
Rate_of_natural_increase)
y<- generalPopn_Dynamics[2]
y
y<- generalPopn_Dynamics[2:1]
y
subset(generalPopn_Dynamics,1:5)
subset(generalPopn_Dynamics,c(1:5))
y <- subset(generalPopn_Dynamics,c(1:5))
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp('D:/rProgramming/UNRA/RSDA')
install.packages("reshape2")
install.packages("plotrix")
runApp('D:/rProgramming/UNRA/RSDA')
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
inputFileData <- NULL
runApp()
runApp('C:/Users/Administrator/Desktop/RcodeExample')
runApp('C:/Users/Administrator/Desktop/RcodeExample')
runApp()
runApp()
runApp()
install.packages("ggvis")
library(ggvis)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("tseries")
install.packages("forecast")
runApp()
runApp()
shiny::runApp()
library(tidyr)
install.packages("tidyr")
color_df <- data.frame(Count1 = c(3,3,5,2),
Count2 = c(4,6,2,0),
Color = c("Red", "Green", "Red", "Blue")
)
sum_df <- color_df %>%
group_by(Color) %>%
summarise_all(sum)
sum_df
sum_df <- color_df %>%
group_by(Color) %>%
summarise_all(sum)
sum_df <- color_df %>%
group_by(Color) %>%
summarise_all(sum)
tidy_df <- sum_df %>%
gather(CountName, Count, -Color)
color_df <- data.frame(Count1 = c(3,3,5,2),
Count2 = c(4,6,2,0),
Color = c("Red", "Green", "Red", "Blue")
)
sum_df <- color_df %>%
group_by(Color) %>%
summarise_all(sum)
sum_df
tidy_df <- sum_df %>%
gather(CountName, Count, -Color)
library(ggplot2)
ggplot(tidy_df, aes(x = Color, fill = CountName, y = Count)) +
geom_col(position = "dodge")
library(dplyr)
library(tidyr)
color_df <- data.frame(Count1 = c(3,3,5,2),
Count2 = c(4,6,2,0),
Color = c("Red", "Green", "Red", "Blue")
)
sum_df <- color_df %>%
group_by(Color) %>%
summarise_all(sum_df)
sum_df
tidy_df <- sum_df %>%
gather(CountName, Count, -Color)
library(ggplot2)
ggplot(tidy_df, aes(x = Color, fill = CountName, y = Count)) +
geom_col(position = "dodge")
color_df <- data.frame(Count1 = c(3,3,5,2),
Count2 = c(4,6,2,0),
Color = c("Red", "Green", "Red", "Blue")
)
sum_df <- color_df %>%
group_by(Color) %>%
summarise_all(sum_df)
sum_df
tidy_df <- sum_df %>%
gather(CountName, Count1, -Color)
ggplot(tidy_df, aes(x = Color, fill = CountName, y = Count)) +
geom_col(position = "dodge")
tidy_df <- sum_df %>%
gather(CountName, Count1, -Color)
color_df <- data.frame(Count1 = c(3,3,5,2),
Count2 = c(4,6,2,0),
Color = c("Red", "Green", "Red", "Blue")
)
sum_df <- color_df %>%
group_by(Color) %>%
summarise_all(sum_df)
sum_df
tidy_df <- sum_df %>%
gather(CountName, Count1, -Color)
ggplot(tidy_df, aes(x = Color, fill = CountName, y = Count)) +
geom_col(position = "dodge")
runApp()
runApp()
shiny::runApp()
library(reshape2)
df <- data.frame(year = c("1996","1995","1994"),
births = c(2333,4565,6789),
deaths = c(123,455,463))
df.long <- melt(df)
df.long
runApp()
runApp()
library(tseries)
library(forecast)
library(tseries)
pop<-read.csv("C:/Users/Administrator/Documents/UgaDemos/population.csv", header = TRUE)
pop
poptimeseries <- ts(pop$Population/1000, frequency=1, start=c(1996), end=c(2016))
ts()
plot(poptimeseries)
axis(side=1, at=1996:2016, cex.axis=1)
plot(forecast(poptimeseries,h=5))
poptimeseries <- ts(pop$Population/1000, frequency=2, start=c(1996), end=c(2016))
plot(poptimeseries)
poptimeseries <- ts(pop$Population/1000, frequency=1, start=c(1996), end=c(2016))
plot(poptimeseries)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(ggplot2)
library(Cairo)   # For nicer ggplot2 output when deployed on Linux
ui <- fluidPage(
# Some custom CSS for a smaller font for preformatted text
tags$head(
tags$style(HTML("
pre, table.table {
font-size: smaller;
}
"))
),
fluidRow(
column(width = 4, wellPanel(
radioButtons("plot_type", "Plot type",
c("base", "ggplot2")
)
)),
column(width = 4,
# In a plotOutput, passing values for click, dblclick, hover, or brush
# will enable those interactions.
plotOutput("plot1", height = 350,
# Equivalent to: click = clickOpts(id = "plot_click")
click = "plot_click",
dblclick = dblclickOpts(
id = "plot_dblclick"
),
hover = hoverOpts(
id = "plot_hover"
),
brush = brushOpts(
id = "plot_brush"
)
)
)
),
fluidRow(
column(width = 3,
verbatimTextOutput("click_info")
),
column(width = 3,
verbatimTextOutput("dblclick_info")
),
column(width = 3,
verbatimTextOutput("hover_info")
),
column(width = 3,
verbatimTextOutput("brush_info")
)
)
)
server <- function(input, output) {
output$plot1 <- renderPlot({
if (input$plot_type == "base") {
plot(mtcars$wt, mtcars$mpg)
} else if (input$plot_type == "ggplot2") {
ggplot(mtcars, aes(wt, mpg)) + geom_point()
}
})
output$click_info <- renderPrint({
cat("input$plot_click:\n")
str(input$plot_click)
})
output$hover_info <- renderPrint({
cat("input$plot_hover:\n")
str(input$plot_hover)
})
output$dblclick_info <- renderPrint({
cat("input$plot_dblclick:\n")
str(input$plot_dblclick)
})
output$brush_info <- renderPrint({
cat("input$plot_brush:\n")
str(input$plot_brush)
})
}
shinyApp(ui, server)
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp('D:/rProgramming/UNRA/RSDA')
runApp()
runApp('D:/rProgramming/UNRA/RSDA')
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
