{
    "collab_server" : "",
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\n# load the required packages\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(plotrix)\nlibrary(reshape2)\nlibrary(ggvis)\nlibrary(tseries)\nlibrary(forecast)\n#=================================================== some helper functions ===================================================\n\n# compute populatio density\npopDensity <- function(populationTotal){\n  pop_density <- populationTotal / 200523\n  return(pop_density)\n}\n# compute the Population growth\npopGrowth <- function(naturalIncrease, netMigrants){\n  populationGrowth <- naturalIncrease + netMigrants\n  return(populationGrowth)\n}\n# obtain correct column names of the uploaded data \n# this function aims at deleting the appended row names\n# when a datafrane is created from an uploaded file\ncorrectNames <- function(inputDataFrame){\n  deleteColumn <- grep(\"(^X$)|(^X\\\\.)(\\\\d+)($)\", colnames(inputDataFrame), perl = TRUE)\n  # ensure that deleteColumn has something\n  if(length(deleteColumn) > 0){\n    # other data types might apply than character\n    row.names(inputDataFrame) <- as.character(inputDataFrame[,grep(\"^X$\",colnames(inputDataFrame))])\n    # or introduction of a  new separate column might  be suitable\n    inputDataFrame <- inputDataFrame[,-deleteColumn]\n    # X might be replaced by different characters, insted of being deleted\n    colnames(inputDataFrame) <- gsub(\"^X\", \"\",colnames(inputDataFrame))\n    \n    return(inputDataFrame)\n  }\n}\n#=============================================================================================================================\n\nshinyServer(function(input, output,session) {\n  \n############################################# cleaning and sorting the data ##################################################\n  rawPopulationData <- read.csv(file.choose() , header = TRUE)\n  # \"C:/Users/Administrator/Documents/UgaDemos/population.csv\"\n  rawPopulationData\n  # break the raw population data into short named columns\n  year                      <- rawPopulationData$Year\n  Births_per_1000_popn       <- rawPopulationData$Births.per.1.000.population\n  Deaths_per_1000_popn       <- rawPopulationData$Deaths.per.1.000.population\n  Net_Migrants_per_1000_popn <- rawPopulationData$Net.Number.of.Migrants.per.1.000.population\n  Rate_of_natural_increase   <- rawPopulationData$Rate.of.natural.increase..percent.\n  Growth_rate_percent        <- rawPopulationData$Growth.rate..percent.\n  Total_population           <- rawPopulationData$Population\n  Births                     <- rawPopulationData$Births\n  Deaths                     <- rawPopulationData$Deaths\n  Net_Migrants               <- rawPopulationData$Net.Number.of.Migrants\n  Natural_increase           <- rawPopulationData$Natural.Increase\n  Population_change          <- rawPopulationData$Population.Change\n  # store the columns in organised dataframes\n  generalPopn_Dynamics              <- data.frame(year,\n                                                  Births,\n                                                  Deaths,\n                                                  Total_population,\n                                                  Natural_increase) # this is for general population Dyanamics\n  populationDyanamics_per_1000_popn <- data.frame(year,\n                                                  Births_per_1000_popn,\n                                                  Deaths_per_1000_popn,\n                                                  Net_Migrants_per_1000_popn)# this is for population Dynamics per 1000 population\n  otherPopulationDynamics           <- data.frame(year,\n                                                  Net_Migrants,\n                                                  Population_change,\n                                                  Growth_rate_percent,\n                                                  Rate_of_natural_increase)\n     # store the three categories into one data frame\n        cleanData <- data.frame(generalPopn_Dynamics,populationDyanamics_per_1000_popn,otherPopulationDynamics)\n        # get years as strings\n        YEARS <- c(\"1996\",\"1997\",\"1998\",\"1999\",\"2000\",\"2001\",\"2002\",\"2003\",\"2004\",\"2005\",\"2006\",\n                   \"2007\",\"2008\",\"2009\",\"2010\",\"2011\",\"2012\",\"2013\",\"2014\",\"2015\",\"2016\")  \n    # this section is for storing piecewise data for statistics section\n    # piecewise data\n        births_and_DeathsData <- data.frame(year, Births, Deaths) # for births and deaths\n        totalPopData <- data.frame(YEARS,Total_population) # for total population\n        naturalIncData <- data.frame(YEARS,Natural_increase, Rate_of_natural_increase)# for Natural increase\n        migrationsData <- data.frame(YEARS, Net_Migrants, Migration_rate = Net_Migrants_per_1000_popn)# for Migrations\n  # end cleaning the data-----------------------------------------------------------------------------------\n  \n ############################################# the statistics section #####\n    # population density\n  populationDensity <- as.integer(popDensity(Total_population)) # get population density as integer\n    # population Growth\n  calcPopGrowth <- popGrowth(Natural_increase, Net_Migrants)\n  \n  growthData <- data.frame(YEARS,\n                           Natural_increase,\n                           Net_Migrants,\n                           Growth = calcPopGrowth,\n                           Growth_rate = Growth_rate_percent)\n  # birth and death rates\n  birthDeathRateData <- data.frame(YEARS,\n                                   Birth_rate = Births_per_1000_popn,\n                                   Death_rate = Deaths_per_1000_popn)\n  # end the statistics section------------------------------------------------------------------------------\n  \n  ############################################ the plots ################\n    # population density;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n        # for line graph \n      popDensityLine <- ggplot(data.frame(year,populationDensity), aes(year,populationDensity))+\n                           geom_line(color = \"#00A65A\", size = 1)+\n                           ggtitle(\"A line graph showing Uganda's population density (1996 - 2016)\")+\n                           scale_x_continuous(\"YEAR\", breaks = seq(1996,2016,2))+\n                           scale_y_continuous(\"POPULATION DENSITY\\n (people / sq km)\", breaks = seq(100,200,10))\n        # for bar graph\n      popDensityBar  <- ggplot(data.frame(year,populationDensity), aes(year,populationDensity, fill = year))+\n                           geom_bar(stat = \"identity\", fill = \"#00A65A\")+\n                           ggtitle(\"A bar graph showing Uganda's population density (1996 - 2016)\")+\n                           scale_x_continuous(\"YEAR\", breaks = seq(1996,2016,2))+\n                           scale_y_continuous(\"POPULATION DENSITY\\n (people / sq km)\", breaks = seq(20,200,20))\n        # first pick the selection\n        poplnDensity_selection <- reactive({\n          switch(input$dens_selection,\n                 \"bar graph\" =  popDensityBar,\n                 \"line graph\" = popDensityLine\n                 )# end switch\n        })\n        # plot the results of the selection\n        output$dens_plot <- renderPlot({\n          poplnDensity_selection()\n        })\n    # end population density;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n    #\n    # Births and Deaths section;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n        # for Births\n        birthsBar <- ggplot(births_and_DeathsData, aes(year,Births))+\n                        geom_bar(stat = \"identity\", fill = \"#00A65A\")+\n                        ggtitle(\"A bar graph showing Uganda's Births (1996 - 2016)\")+\n                        scale_x_continuous(\"YEAR\", breaks = seq(1996,2016,2))+\n                        scale_y_continuous(\"BIRTHS\")\n        deathsBar <- ggplot(births_and_DeathsData, aes(year,Deaths))+\n                        geom_bar(stat = \"identity\", fill = \"red\")+\n                        ggtitle(\"A bar graph showing Uganda's Deaths (1996 - 2016)\")+\n                        scale_x_continuous(\"YEAR\", breaks = seq(1996,2016,2))+\n                        scale_y_continuous(\"DEATHS\", breaks = seq(35000,400000,10000))\n        # for line graph \n        birthsDeathsLine <- ggplot(births_and_DeathsData, aes(year))+\n                              geom_line(aes(y = births_and_DeathsData$Births),color = \"#00A65A\", size = 1)+\n                              geom_line(aes(y = births_and_DeathsData$Deaths),color = \"red\", size = 1)+\n                              ggtitle(\"A line graph showing variation of Uganda's\\n Births and Deaths with years (1996 - 2016)\")+\n                              scale_x_continuous(\"YEAR\", breaks = seq(1996,2016,2))+\n                              scale_y_continuous(\"BIRTHS or DEATHS\", breaks = seq(300000,2000000,100000))\n        # for bar graph\n        #\n        # combine\n        birthsDeathsCombine <- data.frame(YEARS,Births,Deaths)\n        # first reshape the data from wide to long\n        birthsDeathsCombine.long <- melt(birthsDeathsCombine)\n        birthsDeathsCombine.long\n        \n        birthsDeathsBar  <- ggplot(birthsDeathsCombine.long, aes(birthsDeathsCombine.long$YEAR,value, fill = variable))+\n                              geom_bar(stat = \"identity\", position = \"dodge\")+\n                              ggtitle(\"A line graph showing variation of Uganda's\\n Births and Deaths with years (1996 - 2016)\")+\n                              scale_x_discrete(\"YEAR\")+\n                              scale_y_continuous(\"BIRTHS or DEATHS\", breaks = seq(300000,2000000,100000))+\n                              theme(axis.text.x = element_text(angle=60, hjust=1))\n        # first pick the selection\n        births_deaths_selection <- reactive({\n          switch(input$birthsDeaths_selection,\n                 \"Births\" = birthsBar,\n                 \"Deaths\" = deathsBar,\n                 \"bar graph\" =  birthsDeathsBar,\n                 \"line graph\" = birthsDeathsLine\n          )# end switch\n        })\n        # plot the results of the selection\n        output$birthsDeaths_plot <- renderPlot({\n          births_deaths_selection()\n        })\n    # end Births and Deaths section;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n    #\n    #population Growth section;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n        # for population Growth bar\n        popGrowthBar <- ggplot(growthData, aes(YEARS,growthData$Growth, fill = YEARS))+\n                          geom_bar(stat = \"identity\")+\n                          ggtitle(\"A bar graph showing Uganda's Population Growth (1996 - 2016)\")+\n                          scale_x_discrete(\"YEAR\")+\n                          scale_y_continuous(\"POPULATION GROWTH\", breaks = seq(0,1300000,100000))+\n                          theme(plot.title = element_text(hjust = 0.5))\n        # for population Growth line\n        popGrowthLine <- ggplot(data.frame(year,growthData), aes(year,growthData$Growth))+\n                          geom_line(color = \"blue\", size = 1)+\n                          ggtitle(\"A line graph showing Uganda's Population Growth (1996 - 2016)\")+\n                          scale_x_continuous(\"YEAR\", breaks = seq(1996,2016,1))+\n                          scale_y_continuous(\"POPULATION GROWTH\", breaks = seq(0,1300000,100000))+\n                          theme(plot.title = element_text(hjust = 0.5))\n        # select\n        growthSelection <- reactive({\n          switch(input$growthSelection,\n                 \"Bar graph\" = popGrowthBar,\n                 \"Line graph\" = popGrowthLine\n                 )# end switch\n        })\n        # plot the selection\n        output$growthPlot <- renderPlot({\n          growthSelection()\n        })\n        # for population Growth rate bar\n        popGrowthRateBar <- ggplot(growthData, aes(YEARS,growthData$Growth_rate, color = YEARS))+\n                              geom_bar(stat = \"identity\", fill = \"pink\")+\n                              ggtitle(\"A Bar graph showing Uganda's Population Growth Rate (1996 - 2016)\")+\n                              scale_x_discrete(\"YEAR\")+\n                              scale_y_continuous(\"POPULATION GROWTH\\n RATE(%)\", breaks = seq(0.0,4.0,0.2))+\n                              theme(plot.title = element_text(hjust = 0.5))\n        # for population Growth rate line\n        popGrowthRateLine <- ggplot(growthData, aes(year, growthData$Growth_rate))+\n                              geom_line(color = \"blue\", size = 1)+\n                              ggtitle(\"A line graph showing Uganda's Population Growth Rate (1996 - 2016)\")+\n                              scale_x_continuous(\"YEAR\", breaks = seq(1996,2016,1))+\n                              scale_y_continuous(\"POPULATION GROWTH\\n RATE(%)\", breaks = seq(0.0,4.0,0.2))+\n                              theme(plot.title = element_text(hjust = 0.5))\n        # select\n        growthRateSelection <- reactive({\n          switch(input$growthRateSelection,\n                 \"Bar graph\" = popGrowthRateBar,\n                 \"Line graph\" = popGrowthRateLine\n          )# end switch\n        })\n        # plot the selection\n        output$growthRatePlot <- renderPlot({\n          growthRateSelection()\n        })\n    # end population Growth section;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n    #\n    #Birth and Death rate section;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n        # for birth rate bar \n        birthRateBar <- ggplot(birthDeathRateData, aes(YEARS, birthDeathRateData$Birth_rate, fill = YEARS))+\n                          geom_bar(stat = \"identity\")+\n                          ggtitle(\"A Bar graph showing Uganda's Birth Rate (1996 - 2016)\")+\n                          scale_x_discrete(\"YEAR\")+\n                          scale_y_continuous(\"BIRTH RATE\\n (births per 1000 population)\", breaks = seq(0.00,52.00,5.00))+\n                          theme(plot.title = element_text(hjust = 0.5))+\n                          theme(axis.text.x = element_text(angle=60, hjust=1))\n        # for birth rate line\n        birthRateLine <- ggplot(birthDeathRateData, aes(year, birthDeathRateData$Birth_rate))+\n                          geom_line(color = \"blue\", size = 1)+\n                          ggtitle(\"A line graph showing Uganda's Birth Rate (1996 - 2016)\")+\n                          scale_x_continuous(\"YEAR\", breaks = seq(1996,2016,1))+\n                          scale_y_continuous(\"BIRTH RATE\\n (births per 1000 population)\", breaks = seq(40.00,52.00,1.00))+\n                          theme(plot.title = element_text(hjust = 0.5))+\n                          theme(axis.text.x = element_text(angle=60, hjust=1))\n        # select\n        birthRateSelection <- reactive({\n          switch(input$birthRateSelection,\n                 \"Line graph\" = birthRateLine,\n                 \"Bar graph\" = birthRateBar\n          )# end switch\n        })\n        # plot the selection\n        output$birthRatePlot <- renderPlot({\n          birthRateSelection()\n        })\n        #\n        # for death rate bar \n        deathRateBar <- ggplot(birthDeathRateData, aes(YEARS, birthDeathRateData$Death_rate, fill = YEARS))+\n                          geom_bar(stat = \"identity\")+\n                          ggtitle(\"A Bar graph showing Uganda's Death Rate (1996 - 2016)\")+\n                          scale_x_discrete(\"YEAR\")+\n                          scale_y_continuous(\"DEATH RATE\\n (deaths per 1000 population)\", breaks = seq(0.0,18.0,2.0))+\n                          theme(plot.title = element_text(hjust = 0.5))+\n                          theme(axis.text.x = element_text(angle=60, hjust=1))\n        # for death rate line\n        deathRateLine <- ggplot(birthDeathRateData, aes(year, birthDeathRateData$Death_rate))+\n                          geom_line(color = \"red\", size = 1)+\n                          ggtitle(\"A line graph showing Uganda's Death Rate (1996 - 2016)\")+\n                          scale_x_continuous(\"YEAR\", breaks = seq(1996,2016,1))+\n                          scale_y_continuous(\"DEATH RATE\\n (deaths per 1000 population)\", breaks = seq(9.0,18.0,1.0))+\n                          theme(plot.title = element_text(hjust = 0.5))+\n                          theme(axis.text.x = element_text(angle=60, hjust=1))\n        # select\n        deathRateSelection <- reactive({\n          switch(input$deathRateSelection,\n                 \"Line graph\" = deathRateLine,\n                 \"Bar graph\" = deathRateBar\n          )# end switch\n        })\n        # plot the selection\n        output$deathRatePlot <- renderPlot({\n          deathRateSelection()\n        })\n    # end birth and death rate section;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n    #\n    #Total population section;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n        totalPopLine <- ggplot(totalPopData, aes(year,totalPopData$Total_population))+\n                          geom_line(color = \"red\", size = 1)+\n                          ggtitle(\"A line graph showing Uganda's Total population (1996 - 2016)\")+\n                          scale_x_continuous(\"YEAR\", breaks = seq(1996,2016,1))+\n                          scale_y_continuous(\"TOTAL POPULATION\", breaks = seq(20000000,40000000,1500000))+\n                          theme(plot.title = element_text(hjust = 0.5))+\n                          theme(axis.text.x = element_text(angle=60, hjust=1))\n        output$totalPopPlot <- renderPlot({\n          totalPopLine\n        })\n    # end total population section;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n    #\n    #Natural Increase;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n        # for Natural Increase bar\n        naturalIncBar <- ggplot(naturalIncData, aes(YEARS,naturalIncData$Natural_increase, fill = YEARS))+\n                            geom_bar(stat = \"identity\")+\n                            ggtitle(\"A bar graph showing Uganda's Natural Increase (1996 - 2016)\")+\n                            scale_x_discrete(\"YEAR\")+\n                            scale_y_continuous(\"NATURAL INCREASE\", breaks = seq(0,1300000,100000))+\n                            theme(plot.title = element_text(hjust = 0.5))\n        # for Natural Increase line\n        naturalIncLine <- ggplot(naturalIncData, aes(year,naturalIncData$Natural_increase))+\n                              geom_line(color = \"blue\", size = 1)+\n                              ggtitle(\"A line graph showing Uganda's Natural Increase (1996 - 2016)\")+\n                              scale_x_continuous(\"YEAR\", breaks = seq(1996,2016,1))+\n                              scale_y_continuous(\"NATURAL INCREASE\", breaks = seq(500000,1300000,100000))+\n                              theme(plot.title = element_text(hjust = 0.5))\n        # select\n        naturalIncSelection <- reactive({\n          switch(input$naturalIncSelection,\n                 \"Bar graph\" = naturalIncBar,\n                 \"Line graph\" = naturalIncLine\n          )# end switch\n        })\n        # plot the selection\n        output$naturalIncPlot <- renderPlot({\n          naturalIncSelection()\n        })\n        # for Rate of Natural Increase bar\n        naturalIncRateBar <- ggplot(naturalIncData, aes(YEARS,naturalIncData$Rate_of_natural_increase, fill = YEARS))+\n                                geom_bar(stat = \"identity\")+\n                                ggtitle(\"A bar graph showing Uganda's Rate of Natural Increase (1996 - 2016)\")+\n                                scale_x_discrete(\"YEAR\")+\n                                scale_y_continuous(\"RATE OF NATURAL INCREASE\\n(%)\", breaks = seq(0.00,4.00,0.50))+\n                                theme(plot.title = element_text(hjust = 0.5))\n        # for Natural Increase line\n        naturalIncRateLine <- ggplot(naturalIncData, aes(year,naturalIncData$Rate_of_natural_increase))+\n                                geom_line(color = \"blue\", size = 1)+\n                                ggtitle(\"A line graph showing Uganda's Rate of Natural Increase (1996 - 2016)\")+\n                                scale_x_continuous(\"YEAR\", breaks = seq(1996,2016,1))+\n                                scale_y_continuous(\"RATE OF NATURAL INCREASE\\n(%)\", breaks = seq(3.00,4.00,0.01))+\n                                theme(plot.title = element_text(hjust = 0.5))\n        # select\n        naturalIncRateSelection <- reactive({\n          switch(input$naturalIncRateSelection,\n                 \"Bar graph\" = naturalIncRateBar,\n                 \"Line graph\" = naturalIncRateLine\n          )# end switch\n        })\n        # plot the selection\n        output$naturalIncRatePlot <- renderPlot({\n          naturalIncRateSelection()\n        })\n    # end Natural increase section;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n    #\n    #Migrations section;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n        # for migrations bar\n        migrationBar <- ggplot(migrationsData, aes(YEARS,migrationsData$Net_Migrants, fill = YEARS))+\n                          geom_bar(stat = \"identity\")+\n                          ggtitle(\"A bar graph showing Uganda's Net Migrants (1996 - 2016)\")+\n                          scale_x_discrete(\"YEAR\")+\n                          scale_y_continuous(\"NET MIGRANTS\", breaks = seq(-140000,30000,10000))+\n                          theme(plot.title = element_text(hjust = 0.5))\n        # for migrations line\n        migrationLine <- ggplot(migrationsData, aes(year,migrationsData$Net_Migrants))+\n                          geom_line(color = \"#00A65A\", size = 1)+\n                          ggtitle(\"A line graph showing Uganda's Net Migrants (1996 - 2016)\")+\n                          scale_x_continuous(\"YEAR\", breaks = seq(1996,2016,1))+\n                          scale_y_continuous(\"NET MIGRANTS\", breaks = seq(-140000,30000,10000))+\n                          theme(plot.title = element_text(hjust = 0.5))\n        # select\n        migrationsSelection <- reactive({\n          switch(input$migrationsSelection,\n                 \"Bar graph\" = migrationBar,\n                 \"Line graph\" = migrationLine\n          )# end switch\n        })\n        # plot the selection\n        output$migrationsPlot <- renderPlot({\n          migrationsSelection()\n        })\n        #\n        # for migration rate bar\n        migrationRateBar <- ggplot(migrationsData, aes(YEARS,migrationsData$Migration_rate, fill = YEARS))+\n                              geom_bar(stat = \"identity\")+\n                              ggtitle(\"A bar graph showing Uganda's Migration Rate (1996 - 2016)\")+\n                              scale_x_discrete(\"YEAR\")+\n                              scale_y_continuous(\"MIGRATION RATE (%)\", breaks = seq(-7.0,2.0,1.0))+\n                              theme(plot.title = element_text(hjust = 0.5))\n        # for migrations line\n        migrationRateLine <- ggplot(migrationsData, aes(year,migrationsData$Migration_rate))+\n                                geom_line(color = \"#00A65A\", size = 1)+\n                                ggtitle(\"A line graph showing Uganda's Migration Rate (1996 - 2016)\")+\n                                scale_x_continuous(\"YEAR\", breaks = seq(1996,2016,1))+\n                                scale_y_continuous(\"NATURAL INCREASE\", breaks = seq(-7.0,2.0,1.0))+\n                                theme(plot.title = element_text(hjust = 0.5))\n        # select\n        migrationRateSelection <- reactive({\n          switch(input$migrationRateSelection,\n                 \"Bar graph\" = migrationRateBar,\n                 \"Line graph\" = migrationRateLine\n          )# end switch\n        })\n        # plot the selection\n        output$migrationRatePlot <- renderPlot({\n          migrationRateSelection()\n        })\n    # end Migrations section;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n  # end plots section---------------------------------------------------------------------------------------\n  \n############################################## the table outputs #######\n        # for general population Dynamics\n  names(generalPopn_Dynamics) <- c(\n                                    \"Year\\n\",\n                                    \"Births\\n\",\n                                    \"Deaths\\n\",\n                                    \"Total\\n population\",\n                                    \"Natural\\n increase\"\n    \n                                  )\n  output$first10g <- renderTable({\n    generalPopn_Dynamics[1:11,]\n  })\n  output$last10g <- renderTable({\n    generalPopn_Dynamics[12:21,]\n  })\n        # for population dyanamics per 1000 population\n  names(populationDyanamics_per_1000_popn) <- c(\n                                                  \"Year\\n\",\n                                                  \"Births\\n per1000\\n population\",\n                                                  \"Deaths\\n per1000\\n population\",\n                                                  \"Net_Migrants\\n per1000\\n population\"\n    \n                                                )# end names\n  output$first10p <- renderTable({\n    populationDyanamics_per_1000_popn[1:11,]\n  })\n  \n        # for population dynamics per 1000 population\n  output$last10p <- renderTable({\n    populationDyanamics_per_1000_popn[12:21,]\n  })\n        # for other population Dynamics\n  names(otherPopulationDynamics) <- c(\n                                        \"Year\\n\",\n                                        \"Net Number\\n of Migrants\",\n                                        \"Population\\n change\",\n                                        \"Growth rate\\n (%)\",\n                                        \"Rate of\\n Natural\\n increase\"\n                                      )# end names\n  output$first10o <- renderTable({\n    otherPopulationDynamics[1:11,]\n  })\n  output$last10o <- renderTable({\n    otherPopulationDynamics[12:21,]\n  })\n      # for population Density\n  popDensityTable <- data.frame(year,Total_population,populationDensity)\n  names(popDensityTable) <- c (\"Year\\n\",\"Total\\n population\",\"Population\\n Denisty\\n (people per\\n sq km)\")\n  output$dens_table <- renderDataTable({ popDensityTable},\n                                 options = list(pageLength = 11)\n                                 )\n      # for Births and Deaths\n  output$birthsDeaths_table <- renderDataTable({births_and_DeathsData},\n                                               options = list(pageLength = 11, # show only 11 rows at a time\n                                                              autoWidth = TRUE,\n                                                              columnDefs = list(list(width = \"150px\",\n                                                                                     targets = \"_all\")\n                                                                                )\n                                                              )\n                                               )# end data table\n      # for population Growth\n  output$growthTable <- renderDataTable({growthData},\n                                              options = list(pageLength = 10, # show only 10 rows at a time\n                                                             columnDefs = list(list(width = \"10px\",\n                                                                                    targets = \"_all\")\n                                                                               )\n                                                              )\n                                              )# end data table\n  # for birth and death rates\n  output$birthDeathRateTable <- renderDataTable({birthDeathRateData},\n                                                options = list(pageLength = 10, # show only 10 rows at a time\n                                                               autoWidth = TRUE,\n                                                               columnDefs = list(list(width = \"150px\",\n                                                                                      targets = \"_all\")\n                                                                                  )\n                                                              )   \n                                              )# end data table\n  # for total population\n  output$totalPopTable <- renderDataTable({totalPopData},\n                                                options = list(pageLength = 11, # show only 11 rows at a time\n                                                               autoWidth = TRUE,\n                                                               columnDefs = list(list(width = \"50px\",\n                                                                                      targets = \"_all\")\n                                                               )\n                                                ) \n                                          )# end data table\n  # for Natural Increase\n  output$naturalIncTable <- renderDataTable({naturalIncData},\n                                              options = list(pageLength = 10, # show only 10 rows at a time\n                                                             autoWidth = TRUE,\n                                                             columnDefs = list(list(width = \"50px\",\n                                                                                    targets = \"_all\")\n                                                                                )\n                                                              )\n                                          )# end data table\n  # for Migrations\n  output$migrationsTable <- renderDataTable({migrationsData},\n                                                options = list(pageLength = 10, # show only 10 rows at a time\n                                                               autoWidth = TRUE,\n                                                               columnDefs = list(list(width = \"50px\",\n                                                                                      targets = \"_all\")\n                                                                                )\n                                                               )\n                                            )# end data table\n  # end table outputs---------------------------------------------------------------------------------------\n  \n############################################## download section------------------------------------------\n        # download for general population characteristics\n  output$gdownload <- downloadHandler(\n    filename = function(){\n      paste(generalPopn_Dynamics, '.csv', sep = '')\n    },\n    content = function(file){\n      write.csv(generalPopn_Dynamics,file)\n    }\n  )\n      # download for population dynamics per 1000 population\n  output$pdownload <- downloadHandler(\n    filename = function(){\n      paste(populationDyanamics_per_1000_popn, '.csv', sep = '')\n    },\n    content = function(file){\n      write.csv(populationDyanamics_per_1000_popn,file)\n    }\n  )\n      # download for other population Dynamics\n  output$odownload <- downloadHandler(\n    filename = function(){\n      paste(otherPopulationDynamics, '.csv', sep = '')\n    },\n    content = function(file){\n      write.csv(otherPopulationDynamics,file)\n    }\n  )\n  # end download section------------------------------------------------------------------------------------\n  \n############################################## upload data section #######\n      # set the file size to be not greater than 10Mb\n      options(shiny.maxRequestSize = 10*1024^2)\n      # Handle the input file........................................................\n      inputFile <- NULL\n      inputFileData <- NULL\n        # make data frame out of the file uploaded\n        inputFileData <- reactive({\n                              inputFile <- input$uploadedFile\n                              if(is.null(inputFile)){\n                                return(NULL)\n                              }\n                              # verify that the file is less than 10Mb in oder to regulate upload bandwidth\n                              if(file.info(inputFile$datapath)$size > (10*1024^2)){\n                                output$notify <- renderText(\"File size is greater than acceptable size of 10Mb.\") # reject file and notify the user\n                              }\n                              # save the data\n                              read.csv(inputFile$datapath, header = TRUE) # accept the file\n                              # set the column names\n                              #inputFileData <- correctNames(inputFileData)  \n                          })\n        #\n        #\n        # handle output when file is uploaded\n        observeEvent(input$uploadedFile,{\n        # ensure that the table is not larger than 8 columns       \n        if(ncol(inputFileData()) <= 8){\n            #accept to display the table\n            output$inputData <- renderDataTable({inputFileData()},\n                                                options = list(pageLength = 12, # show only 12 rows at a time\n                                                               autoWidth = TRUE,\n                                                               columnDefs = list(list(width = \"200px\",targets = \"_all\"))\n                                                ))\n        }else{\n            # notify the user that data is saved but dont display the  table\n            output$saved <- renderText(\n              \"Table cannot fit in this area but data is saved,\n              go ahead and make plots of your data.\"\n            )\n        }\n        # do something\n        output$doSomething <- renderUI({\n          textOutput(outputId = \"dosmth\")\n        })\n        output$dosmth <- renderText(\"Select what to Plot.\")\n        \n        #selects+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n        # for x values\n        output$xValues <- renderUI({\n          # if dataframe is empty return to avoid errors in later functions\n          if(is.null(inputFileData())){\n            return(NULL)\n          }\n          else{\n            items <- names(inputFileData()) # get the names of the input dataframe\n            # create the select input\n            selectInput(inputId = \"xvalues\",\n                        label = \"Choose value to represent on horizontal axis.\",\n                        choices = items\n            )# end select\n          }\n        })\n        # for y values\n        output$yValues <- renderUI({\n          # if dataframe is empty return to avoid errors in later functions\n          if(is.null(inputFileData())){\n            return(NULL)\n          }\n          else{\n            items <- names(inputFileData()) # get the names of the input dataframe\n            # create the select input\n            selectInput(inputId = \"yvalues\",\n                        label = \"Choose value to represent on vertical axis.\",\n                        choices = items\n            )# end select\n          }\n        })\n        # end selects+++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n        # give labels---------------------------------------------------------\n        # for x label\n        output$xlabel <- renderUI({\n          textInput(inputId = \"horizo\", label = \"Give horizontal axis label.\")\n        })\n        # for y label\n        output$ylabel <- renderUI({\n          textInput(inputId = \"vertic\", label = \"Give vertical axis.\")\n        })\n        # for title\n        output$plotTitle <- renderUI({\n          textInput(inputId = \"plot_title\", label = \"Give title to your plot.\")\n        })\n        # end give labels-----------------------------------------------------\n        # for plot button\n        output$plotButton <- renderUI({\n          actionButton(inputId = \"plot\", label = \"Plot\")\n        })\n        \n      })# end observeEvents\n        #\n        #\n        #\n      # get selections for each axis\n          # for x\n          xVar <- reactive({\n            inputFileData()[[input$xvalues]] \n          })\n          # for y\n          yVar <- reactive({\n            inputFileData()[[input$yvalues]]\n          })\n      # plot the selection;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n        # labels and title\n          plottitle <- reactive({input$plot_title}) # title\n          x_label <- reactive({input$horizo})# x label\n          y_label <- reactive({input$vertic})# y label\n          #\n          #\n          # for line graph\n          lineGraph <- reactive({\n            ggplot(inputFileData(), aes(xVar(), yVar(),fill = xVar()))+\n              geom_line(color = \"red\", size = 1)+\n              ggtitle(plottitle())+\n              labs(x = x_label(), y = y_label())+\n              theme(axis.text.x = element_text(angle=60, hjust=1))+\n              theme(plot.title = element_text(hjust = 0.5))\n          })\n          # for bar graph\n          barGraph <- reactive({\n            ggplot(inputFileData(), aes(xVar(), yVar(),fill = xVar()))+\n              geom_bar(stat = \"identity\", fill = \"#00A65A\")+\n              ggtitle(plottitle())+\n              labs(x = x_label(), y = y_label())+\n              theme(axis.text.x = element_text(angle=60, hjust=1))+\n              theme(plot.title = element_text(hjust = 0.5))\n          })\n          # for box plot\n          boxPlotGraph <- reactive({\n            ggplot(inputFileData(), aes(xVar(), yVar(),color = xVar()))+\n              geom_boxplot()+\n              ggtitle(plottitle())+\n              labs(x = x_label(), y = y_label())+\n              theme(axis.text.x = element_text(angle=60, hjust=1))+\n              theme(plot.title = element_text(hjust = 0.5))\n          })\n          # select what type of plot\n          selected_plot <- reactive({\n            switch(input$selectedPlot,\n                                \"bar graph\" = barGraph(),\n                                \"line graph\" = lineGraph(),\n                                \"boxplot\" = boxPlotGraph()\n                   )# end switch\n          })\n          # make plot if the button is clicked\n          observeEvent(input$plot,{\n              # display the what to plot select\n              output$whatToPlot <- renderUI({\n                selectInput(inputId = \"selectedPlot\",\n                            label = \"Show on.\",\n                            choices = c(\n                                        \"bar graph\",\n                                        \"line graph\",\n                                        \"boxplot\"\n                                        )\n                            )\n              })\n              # display plot\n              output$displayPlot <- renderPlot({\n                selected_plot()\n              })\n              #display download button and help text\n              output$savePlot <- renderText({\n                \"To save this Plot click the download button. \"\n              })\n              output$downloadPlot <- renderUI({\n                downloadButton(outputId = \"thePlot\", label = \"Download Plot\")\n              })\n          })# end observeEvent\n          # download the plot and save it on the user's computer\n          output$thePlot <- downloadHandler(\n            filename = function(){\n              paste(\"plot\", '.png', sep = '')\n            },\n            content = function(file){\n              ggsave(file,selected_plot())\n            }\n          )\n      # end plot section;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n      \n      #....................................................................................... \n   # end ulpoad data section---------------------------------------------------------------------------------\n############################################## predictions section ######\n     # for total population;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n          totalPopulation_ts <- ts(Total_population, frequency = 1, start=c(1996,2), end=c(2016,2))# create the time serries\n          # create a forecast plot object\n          totalPopulation_forecast <- autoplot(totalPopulation_ts)+ geom_forecast(h = 5)+\n                                        ggtitle(\"Predictions for the total Population of Uganda, 2017 to 2022\")+\n                                        labs(x = \"YEARS\", y = \"Total Population\")+\n                                        scale_x_continuous(breaks = seq(1996,2025,2))+\n                                        scale_y_continuous(breaks = seq(15000000,50000000,1600000))+\n                                        theme(plot.title = element_text(hjust = 0.5))\n          # the plot        \n          output$popPrediction <- renderPlot({\n            totalPopulation_forecast\n          })\n          # download\n          output$totalPopPredic <- downloadHandler(\n            filename = function(){\n              paste(\"total_populationPrediction\",'.png', sep = '')\n            },\n            content = function(file){\n              ggsave(file,totalPopulation_forecast)\n            }\n          )\n      # for total births;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n          totalBirths_ts <- ts(Births, frequency = 1, start = c(1996,2), end = c(2016,2)) # create time series for Births\n          # create forecast plot object\n          totalBirths_forecast <- autoplot(totalBirths_ts)+geom_forecast(h = 6)+\n                                      ggtitle(\"Predictions for the total Births of Uganda, 2017 to 2022\")+\n                                      labs(x = \"YEARS\", y = \"Total Births\")+\n                                      scale_x_continuous(breaks = seq(1996,2024,2))+\n                                      scale_y_continuous(breaks = seq(1000000,2000000,100000))+\n                                      theme(plot.title = element_text(hjust = 0.5))\n          # the plot\n          output$birthsPrediction <- renderPlot({\n            totalBirths_forecast\n          })\n          # download\n          output$totalBirthsPredic <- downloadHandler(\n            filename = function(){\n              paste(\"births_Prediction\",'.png', sep = '')\n            },\n            content = function(file){\n              ggsave(file,totalBirths_forecast)\n            }\n          )\n      # for total deaths;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n          totalDeaths_ts <- ts(Deaths, frequency = 1, start = c(1996,2), end = c(2016,2)) # create time series for Deaths\n          # create forecast plot object\n          totalDeaths_forecast <- autoplot(totalDeaths_ts) + geom_forecast(h = 4)+\n                                      ggtitle(\"Predictions for the total Deaths of Uganda, 2017 to 2022\")+\n                                      labs(x = \"YEARS\", y = \"Total Deaths\")+\n                                      scale_x_continuous(breaks = seq(1996,2021,2))+\n                                      scale_y_continuous(breaks = seq(300000,500000,10000))+\n                                      theme(plot.title = element_text(hjust = 0.5))\n          output$deathsthsPrediction <- renderPlot({\n            totalDeaths_forecast\n          })\n          # download\n          output$totalDeathsPredic <- downloadHandler(\n            filename = function(){\n              paste(\"deaths_Prediction\",'.png', sep = '')\n            },\n            content = function(file){\n              ggsave(file,totalDeaths_forecast)\n            }\n          )\n      # for natural Increase;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n          naturalIncrease_ts <- ts(Natural_increase, frequency = 1, start = c(1996), end = c(2016))#create time series for natural increase\n          # create forecast plot object\n          naturalIncrease_forecast <- autoplot(naturalIncrease_ts) + geom_forecast(h = 6)+\n                                        ggtitle(\"Predictions for the Natural Increase\")+\n                                        labs(x = \"YEARS\", y = \"Natural Increase\")+\n                                        scale_x_continuous(breaks = seq(1996,2021,2))+\n                                        scale_y_continuous(breaks = seq(500000,1500000,100000))+\n                                        theme(plot.title = element_text(hjust = 0.5))\n          output$naturalIncreasePrediction <- renderPlot({\n            naturalIncrease_forecast\n          })\n            \n          \n   #end the predictions section------------------------------------------------------------------------------\n############################################## faqs section #####\n   # for Rate Us;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n          # for agreed\n          output$agreed <- renderInfoBox({\n            infoBox(\"Rating\", paste0(5 + input$agree, \" people agree\"), color = \"teal\")\n          })\n          # for disagreed\n          output$disagreed <- renderInfoBox({\n            infoBox(\"Rating\", paste0(0 + input$disagree, \" people disagree\"), color = \"red\",icon = icon(\"list\"))\n          })\n   # end Rate Us;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n   #\n   # for FAQs;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n          \n          # get the input qn\n          inputQn <- reactive({\n            input$question\n          })\n          # display the qn back\n          observeEvent(input$askQn,{\n            \n            output$askedQn <- renderText({\n              inputQn()\n            })\n            #\n            output$qn <- renderUI({\n              textOutput(outputId = \"askedQn\")\n            })\n          })\n          \n          \n   # end FAQs;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n          \n   # end faqs section----------------------------------------------------------------------------------------\n})# end shinyServer------------------------------------------------------------------------------------------\n",
    "created" : 1501326770491.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "15|75|43|1|\n48|76|90|118|\n93|70|107|69|\n110|57|414|111|\n125|44|130|8|\n132|40|134|8|\n171|45|178|8|\n180|48|182|8|\n417|65|521|61|\n427|34|429|2|\n430|33|432|2|\n441|34|443|2|\n446|33|448|2|\n457|34|459|2|\n460|33|462|2|\n524|63|551|3|\n527|26|529|4|\n530|29|532|4|\n536|26|538|4|\n539|29|541|4|\n545|26|547|4|\n548|29|550|4|\n554|67|742|95|\n602|36|615|8|\n617|36|630|8|\n634|35|636|8|\n638|35|640|8|\n642|38|644|8|\n645|25|650|8|\n657|28|659|10|\n661|28|663|10|\n672|33|679|10|\n681|32|688|10|\n690|36|697|10|\n699|37|705|10|\n709|45|718|14|\n727|47|729|14|\n733|34|735|12|\n736|37|738|12|\n825|60|857|10|\n",
    "hash" : "2014267804",
    "id" : "FDA1842C",
    "lastKnownWriteTime" : 1502872430,
    "last_content_update" : 1502972560105,
    "path" : "C:/Users/Administrator/Desktop/Group11_UgaDemos/UgaDemos/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}